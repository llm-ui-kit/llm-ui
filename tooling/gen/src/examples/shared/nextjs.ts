import { $ } from "execa";
import fs from "fs/promises";
import Handlebars from "handlebars";
import path from "path";
import replace from "replace-in-file";
import { rimraf } from "rimraf";
import { shell } from "./shell";

type SetupNextjsOptions = {
  folder: string;
  exampleFolder: string;
  exampleName: string;
  dependencies: string[];
  devDependencies: string[];
};

const nextjsVersion = "14.2.3";

export const setupNextjs = async ({
  folder,
  exampleFolder,
  exampleName,
  dependencies,
  devDependencies,
}: SetupNextjsOptions) => {
  await $`mkdir -p ${folder}`;

  await shell()`pnpm create next-app@${nextjsVersion} --ts --tailwind --eslint --app --src-dir --import-alias=@/* --use-npm ${folder}`;

  await shell({
    cwd: folder,
  })`npm install --save ${dependencies.join(" ")}`;

  await shell({
    cwd: folder,
  })`npm install --save-dev ${devDependencies.join(" ")}`;

  await fs.rm(path.join(folder, "package-lock.json"));

  await replace({
    files: [path.join(folder, "package.json")],
    from: /"name": ".*",/,
    to: `"name": "${exampleName}",\n  "license": "MIT",`,
  });

  await fs.rm(path.join(folder, "src/app/favicon.ico"));
  await rimraf(path.join(folder, "public"));

  const layoutFile = path.join(folder, "src/app/layout.tsx");

  await replace({
    files: [layoutFile],
    from: "Create Next App",
    to: exampleName,
  });

  await replace({
    files: [layoutFile],
    from: "Generated by create next app",
    to: exampleName,
  });

  const tailwindConfig = path.join(folder, "tailwind.config.ts");

  await replace({
    files: [tailwindConfig],
    from: "plugins: [],",
    to: "plugins: [typography],",
  });

  await replace({
    files: [tailwindConfig],
    from: `import type { Config } from "tailwindcss";`,
    to: `import type { Config } from "tailwindcss";\nimport typography from "@tailwindcss/typography";`,
  });

  const readMeTemplate = await fs.readFile(
    "src/examples/shared/readme.md.hbs",
    "utf8",
  );
  const template = Handlebars.compile(readMeTemplate);
  await fs.writeFile(
    path.join(folder, "readme.md"),
    template({ exampleFolder, exampleName }),
  );
};
